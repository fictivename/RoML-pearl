import numpy as np
from gym.spaces import Box

from . import register_env
from .half_cheetah import HalfCheetahEnv


@register_env('cheetah-body')
class HalfCheetahBodyEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py
    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].
    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """
    def __init__(self, task={}, n_tasks=2, randomize_tasks=True):
        self._task = task
        self.tasks = self.sample_tasks(n_tasks)
        self._idx = 0
        if not self._task:
            self._task = self.tasks[0]
        super(HalfCheetahBodyEnv, self).__init__()

        # save original cheetah properties (tasks are defined as ratios of these)
        self.original_mass_vec = self.model.body_mass.copy()  # 8 elements
        # self.original_inertia_vec = self.model.body_inertia.copy()  # 8x3 elements
        self.original_damp_vec = self.model.dof_damping.copy()  # 9 elements
        self.original_len = self.model.geom_size[2, 1].copy()  # 1 element

        self.set_task()

        self._curr_steps = n_tasks * [0]
        self._curr_return = n_tasks * [0]
        self.observation_space = Box(low=-np.inf, high=np.inf, shape=(20,), dtype=np.float64)

    def step(self, action):
        xposbefore = self.sim.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.sim.data.qpos[0]

        forward_reward = (xposafter - xposbefore) / self.dt
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()

        # this value is in [-0.1,0.1] when the cheetah is straight, and in [-0.6,-0.4] when it's upside-down.
        #  we penalize the cheetah being upside down.
        reward_height = observation[0]
        reward = forward_reward - ctrl_cost + reward_height
        
        done = False
        self._curr_steps[self._idx] += 1
        self._curr_return[self._idx] += reward
        infos = dict(reward_forward=forward_reward,
            reward_ctrl=-ctrl_cost, task=self._task)
        return (observation, reward, done, infos)

    def sample_tasks(self, num_tasks):
        #np.random.seed(1337)
        factors =  2 ** np.random.uniform(-1, 1, size=(num_tasks,3))
        tasks = [{'factors': factors[i,:]} for i in range(factors.shape[0])]
        return tasks
    
    def get_all_task_idx(self):
        return range(len(self.tasks))
        
    def get_task_return(self, idx=None):
        if idx is None:
            idx = self._idx
        return self._curr_return[idx]

    def reset_task(self, idx, task=None, resample_task=False):
        self._idx = idx
        if task is not None:
            if not isinstance(task, dict):
                task = dict(factors=task)
            self.tasks[idx] = task
        elif resample_task:
            self.tasks[idx] = self.sample_tasks(1)[0]
        self._task = self.tasks[idx]
        self._curr_steps[self._idx] = 0
        self._curr_return[self._idx] = 0
        self.set_task()
        self.reset()

    def set_task(self):
        task = self._task['factors']

        self.model.geom_size[1:, 0] = 0.046 * task[0]  # increase thickness with mass
        for i in range(len(self.model.body_mass)):
            self.model.body_mass[i] = task[0] * self.original_mass_vec[i]
        # for i in range(len(self.model.body_inertia)):
        #     self.model.body_inertia[i] = task[1] * self.original_inertia_vec[i]
        for i in range(len(self.model.dof_damping)):
            self.model.dof_damping[i] = task[1] * self.original_damp_vec[i]
        self.model.geom_size[2, 1] = task[2] * self.original_len

        return task
